// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: protos/fraud_detection.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FraudDetectionService_ProcessTransaction_FullMethodName       = "/fraud_detection.FraudDetectionService/ProcessTransaction"
	FraudDetectionService_GetFraudScore_FullMethodName            = "/fraud_detection.FraudDetectionService/GetFraudScore"
	FraudDetectionService_StreamFraudAlerts_FullMethodName        = "/fraud_detection.FraudDetectionService/StreamFraudAlerts"
	FraudDetectionService_BatchProcessTransactions_FullMethodName = "/fraud_detection.FraudDetectionService/BatchProcessTransactions"
)

// FraudDetectionServiceClient is the client API for FraudDetectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Fraud Detection Service
type FraudDetectionServiceClient interface {
	// Process a transaction and return fraud score
	ProcessTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*FraudResponse, error)
	// Get fraud score for a transaction
	GetFraudScore(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*FraudScoreResponse, error)
	// Stream real-time fraud alerts
	StreamFraudAlerts(ctx context.Context, in *FraudAlertRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FraudAlert], error)
	// Batch process multiple transactions
	BatchProcessTransactions(ctx context.Context, in *BatchTransactionRequest, opts ...grpc.CallOption) (*BatchFraudResponse, error)
}

type fraudDetectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFraudDetectionServiceClient(cc grpc.ClientConnInterface) FraudDetectionServiceClient {
	return &fraudDetectionServiceClient{cc}
}

func (c *fraudDetectionServiceClient) ProcessTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*FraudResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FraudResponse)
	err := c.cc.Invoke(ctx, FraudDetectionService_ProcessTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fraudDetectionServiceClient) GetFraudScore(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*FraudScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FraudScoreResponse)
	err := c.cc.Invoke(ctx, FraudDetectionService_GetFraudScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fraudDetectionServiceClient) StreamFraudAlerts(ctx context.Context, in *FraudAlertRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FraudAlert], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FraudDetectionService_ServiceDesc.Streams[0], FraudDetectionService_StreamFraudAlerts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FraudAlertRequest, FraudAlert]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FraudDetectionService_StreamFraudAlertsClient = grpc.ServerStreamingClient[FraudAlert]

func (c *fraudDetectionServiceClient) BatchProcessTransactions(ctx context.Context, in *BatchTransactionRequest, opts ...grpc.CallOption) (*BatchFraudResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchFraudResponse)
	err := c.cc.Invoke(ctx, FraudDetectionService_BatchProcessTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FraudDetectionServiceServer is the server API for FraudDetectionService service.
// All implementations must embed UnimplementedFraudDetectionServiceServer
// for forward compatibility.
//
// Fraud Detection Service
type FraudDetectionServiceServer interface {
	// Process a transaction and return fraud score
	ProcessTransaction(context.Context, *TransactionRequest) (*FraudResponse, error)
	// Get fraud score for a transaction
	GetFraudScore(context.Context, *TransactionRequest) (*FraudScoreResponse, error)
	// Stream real-time fraud alerts
	StreamFraudAlerts(*FraudAlertRequest, grpc.ServerStreamingServer[FraudAlert]) error
	// Batch process multiple transactions
	BatchProcessTransactions(context.Context, *BatchTransactionRequest) (*BatchFraudResponse, error)
	mustEmbedUnimplementedFraudDetectionServiceServer()
}

// UnimplementedFraudDetectionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFraudDetectionServiceServer struct{}

func (UnimplementedFraudDetectionServiceServer) ProcessTransaction(context.Context, *TransactionRequest) (*FraudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTransaction not implemented")
}
func (UnimplementedFraudDetectionServiceServer) GetFraudScore(context.Context, *TransactionRequest) (*FraudScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFraudScore not implemented")
}
func (UnimplementedFraudDetectionServiceServer) StreamFraudAlerts(*FraudAlertRequest, grpc.ServerStreamingServer[FraudAlert]) error {
	return status.Errorf(codes.Unimplemented, "method StreamFraudAlerts not implemented")
}
func (UnimplementedFraudDetectionServiceServer) BatchProcessTransactions(context.Context, *BatchTransactionRequest) (*BatchFraudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchProcessTransactions not implemented")
}
func (UnimplementedFraudDetectionServiceServer) mustEmbedUnimplementedFraudDetectionServiceServer() {}
func (UnimplementedFraudDetectionServiceServer) testEmbeddedByValue()                               {}

// UnsafeFraudDetectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FraudDetectionServiceServer will
// result in compilation errors.
type UnsafeFraudDetectionServiceServer interface {
	mustEmbedUnimplementedFraudDetectionServiceServer()
}

func RegisterFraudDetectionServiceServer(s grpc.ServiceRegistrar, srv FraudDetectionServiceServer) {
	// If the following call pancis, it indicates UnimplementedFraudDetectionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FraudDetectionService_ServiceDesc, srv)
}

func _FraudDetectionService_ProcessTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FraudDetectionServiceServer).ProcessTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FraudDetectionService_ProcessTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FraudDetectionServiceServer).ProcessTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FraudDetectionService_GetFraudScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FraudDetectionServiceServer).GetFraudScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FraudDetectionService_GetFraudScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FraudDetectionServiceServer).GetFraudScore(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FraudDetectionService_StreamFraudAlerts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FraudAlertRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FraudDetectionServiceServer).StreamFraudAlerts(m, &grpc.GenericServerStream[FraudAlertRequest, FraudAlert]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FraudDetectionService_StreamFraudAlertsServer = grpc.ServerStreamingServer[FraudAlert]

func _FraudDetectionService_BatchProcessTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FraudDetectionServiceServer).BatchProcessTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FraudDetectionService_BatchProcessTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FraudDetectionServiceServer).BatchProcessTransactions(ctx, req.(*BatchTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FraudDetectionService_ServiceDesc is the grpc.ServiceDesc for FraudDetectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FraudDetectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fraud_detection.FraudDetectionService",
	HandlerType: (*FraudDetectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessTransaction",
			Handler:    _FraudDetectionService_ProcessTransaction_Handler,
		},
		{
			MethodName: "GetFraudScore",
			Handler:    _FraudDetectionService_GetFraudScore_Handler,
		},
		{
			MethodName: "BatchProcessTransactions",
			Handler:    _FraudDetectionService_BatchProcessTransactions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFraudAlerts",
			Handler:       _FraudDetectionService_StreamFraudAlerts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/fraud_detection.proto",
}

const (
	ModelService_GetModelInfo_FullMethodName    = "/fraud_detection.ModelService/GetModelInfo"
	ModelService_UpdateModel_FullMethodName     = "/fraud_detection.ModelService/UpdateModel"
	ModelService_GetModelMetrics_FullMethodName = "/fraud_detection.ModelService/GetModelMetrics"
)

// ModelServiceClient is the client API for ModelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Model Service
type ModelServiceClient interface {
	// Get model metadata
	GetModelInfo(ctx context.Context, in *ModelInfoRequest, opts ...grpc.CallOption) (*ModelInfo, error)
	// Update model
	UpdateModel(ctx context.Context, in *ModelUpdateRequest, opts ...grpc.CallOption) (*ModelUpdateResponse, error)
	// Get model performance metrics
	GetModelMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*ModelMetrics, error)
}

type modelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelServiceClient(cc grpc.ClientConnInterface) ModelServiceClient {
	return &modelServiceClient{cc}
}

func (c *modelServiceClient) GetModelInfo(ctx context.Context, in *ModelInfoRequest, opts ...grpc.CallOption) (*ModelInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModelInfo)
	err := c.cc.Invoke(ctx, ModelService_GetModelInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateModel(ctx context.Context, in *ModelUpdateRequest, opts ...grpc.CallOption) (*ModelUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModelUpdateResponse)
	err := c.cc.Invoke(ctx, ModelService_UpdateModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetModelMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*ModelMetrics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModelMetrics)
	err := c.cc.Invoke(ctx, ModelService_GetModelMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelServiceServer is the server API for ModelService service.
// All implementations must embed UnimplementedModelServiceServer
// for forward compatibility.
//
// Model Service
type ModelServiceServer interface {
	// Get model metadata
	GetModelInfo(context.Context, *ModelInfoRequest) (*ModelInfo, error)
	// Update model
	UpdateModel(context.Context, *ModelUpdateRequest) (*ModelUpdateResponse, error)
	// Get model performance metrics
	GetModelMetrics(context.Context, *MetricsRequest) (*ModelMetrics, error)
	mustEmbedUnimplementedModelServiceServer()
}

// UnimplementedModelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModelServiceServer struct{}

func (UnimplementedModelServiceServer) GetModelInfo(context.Context, *ModelInfoRequest) (*ModelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelInfo not implemented")
}
func (UnimplementedModelServiceServer) UpdateModel(context.Context, *ModelUpdateRequest) (*ModelUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModel not implemented")
}
func (UnimplementedModelServiceServer) GetModelMetrics(context.Context, *MetricsRequest) (*ModelMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelMetrics not implemented")
}
func (UnimplementedModelServiceServer) mustEmbedUnimplementedModelServiceServer() {}
func (UnimplementedModelServiceServer) testEmbeddedByValue()                      {}

// UnsafeModelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelServiceServer will
// result in compilation errors.
type UnsafeModelServiceServer interface {
	mustEmbedUnimplementedModelServiceServer()
}

func RegisterModelServiceServer(s grpc.ServiceRegistrar, srv ModelServiceServer) {
	// If the following call pancis, it indicates UnimplementedModelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModelService_ServiceDesc, srv)
}

func _ModelService_GetModelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetModelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelService_GetModelInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetModelInfo(ctx, req.(*ModelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelService_UpdateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateModel(ctx, req.(*ModelUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetModelMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetModelMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelService_GetModelMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetModelMetrics(ctx, req.(*MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelService_ServiceDesc is the grpc.ServiceDesc for ModelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fraud_detection.ModelService",
	HandlerType: (*ModelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetModelInfo",
			Handler:    _ModelService_GetModelInfo_Handler,
		},
		{
			MethodName: "UpdateModel",
			Handler:    _ModelService_UpdateModel_Handler,
		},
		{
			MethodName: "GetModelMetrics",
			Handler:    _ModelService_GetModelMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/fraud_detection.proto",
}
